from django.db import models
from django.urls import reverse
from filer.fields.image import FilerImageField
from filer.fields.file import FilerFileField
from django.db import models
from image_cropping import ImageCropField, ImageRatioField

class TimeStampedModel(models.Model):
    """Abstract base class v·ªõi timestamp"""
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Ng√†y t·∫°o")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Ng√†y c·∫≠p nh·∫≠t")
    
    class Meta:
        abstract = True
class HeroSlide(TimeStampedModel):
    """Hero Slider v·ªõi custom crop functionality"""
    title = models.CharField(max_length=200, verbose_name="Ti√™u ƒë·ªÅ")
    subtitle = models.TextField(max_length=500, verbose_name="M√¥ t·∫£")
    
    # ===== REGULAR IMAGE FIELD + CROP COORDINATES =====
    background = models.ImageField(
        "·∫¢nh n·ªÅn",
        upload_to="hero_slides/",
        help_text="T·ªâ l·ªá khuy·∫øn ngh·ªã: 1920x1080. C√≥ th·ªÉ crop sau khi upload."
    )
    
    # Store crop coordinates as text field
    cropping = models.CharField(
        max_length=50,
        blank=True,
        verbose_name="Crop coordinates",
        help_text="Format: x,y,width,height"
    )
    
    # Buttons
    primary_button_text = models.CharField(
        max_length=50, 
        default="ƒêƒÉng k√Ω tham quan",
        verbose_name="Text n√∫t ch√≠nh"
    )
    primary_button_link = models.CharField(
        max_length=200,
        default="#contact", 
        verbose_name="Link n√∫t ch√≠nh"
    )
    
    secondary_button_text = models.CharField(
        max_length=50,
        blank=True,
        verbose_name="Text n√∫t ph·ª•"
    )
    secondary_button_link = models.CharField(
        max_length=200,
        blank=True,
        verbose_name="Link n√∫t ph·ª•"
    )
    
    # Th·ª© t·ª± v√† hi·ªÉn th·ªã
    order = models.IntegerField(default=0, verbose_name="Th·ª© t·ª±")
    is_active = models.BooleanField(default=True, verbose_name="Hi·ªÉn th·ªã")
    
    class Meta:
        verbose_name = "Hero Slide"
        verbose_name_plural = "Hero Slides"
        ordering = ['order']
    
    def __str__(self):
        return f"{self.title} (Order: {self.order})"
    
    def get_cropped_image_url(self):
        """Tr·∫£ v·ªÅ URL ·∫£nh ƒë√£ crop"""
        if not self.background:
            return None
            
        if not self.cropping:
            return self.background.url
            
        try:
            from easy_thumbnails.files import get_thumbnailer
            coords = self.cropping.split(',')
            if len(coords) == 4:
                x = int(round(float(coords[0])))
                y = int(round(float(coords[1])))
                w = int(round(float(coords[2])))
                h = int(round(float(coords[3])))
                box = (x, y, x + w, y + h)
                
                thumbnailer = get_thumbnailer(self.background)
                cropped_image = thumbnailer.get_thumbnail({
                    'size': (1534, 512),
                    'crop': 'smart',
                    'quality': 95,
                    'box': box,
                })
                return cropped_image.url
            else:
                return self.background.url
        except Exception as e:
            print(f"Error creating cropped thumbnail: {e}")
            return self.background.url
class SEOModel(models.Model):
    """Abstract base class cho SEO"""
    meta_title = models.CharField(
        max_length=60, 
        blank=True, 
        verbose_name="Ti√™u ƒë·ªÅ SEO",
        help_text="T·ªëi ƒëa 60 k√Ω t·ª±"
    )
    meta_description = models.TextField(
        max_length=160, 
        blank=True, 
        verbose_name="M√¥ t·∫£ SEO",
        help_text="T·ªëi ƒëa 160 k√Ω t·ª±"
    )
    meta_keywords = models.CharField(
        max_length=255, 
        blank=True, 
        verbose_name="T·ª´ kh√≥a SEO",
        help_text="C√°c t·ª´ kh√≥a c√°ch nhau b·∫±ng d·∫•u ph·∫©y"
    )
    
    class Meta:
        abstract = True

# ==================== HERO SLIDER ====================
class HeroSlide(TimeStampedModel):
    """Hero Slider v·ªõi crop functionality - Qu·∫£n l√Ω t·∫°i: Th√¥ng tin c∆° b·∫£n ‚Üí Hero Slides"""
    title = models.CharField(max_length=200, verbose_name="Ti√™u ƒë·ªÅ")
    subtitle = models.TextField(max_length=500, verbose_name="M√¥ t·∫£")
    
    # ===== CROP FUNCTIONALITY (t·ª´ HeroSetting) =====
    background = ImageCropField(
        "·∫¢nh n·ªÅn",
        upload_to="hero_slides/",
        help_text="T·ªâ l·ªá khuy·∫øn ngh·ªã: 1920x1080. C√≥ th·ªÉ crop sau khi upload."
    )
    cropping = ImageRatioField('background', '1920x1080')
    
    # Buttons
    primary_button_text = models.CharField(
        max_length=50, 
        default="ƒêƒÉng k√Ω tham quan",
        verbose_name="Text n√∫t ch√≠nh"
    )
    primary_button_link = models.CharField(
        max_length=200,
        default="#contact", 
        verbose_name="Link n√∫t ch√≠nh"
    )
    
    secondary_button_text = models.CharField(
        max_length=50,
        blank=True,
        verbose_name="Text n√∫t ph·ª•"
    )
    secondary_button_link = models.CharField(
        max_length=200,
        blank=True,
        verbose_name="Link n√∫t ph·ª•"
    )
    
    # Th·ª© t·ª± v√† hi·ªÉn th·ªã
    order = models.IntegerField(default=0, verbose_name="Th·ª© t·ª±")
    is_active = models.BooleanField(default=True, verbose_name="Hi·ªÉn th·ªã")
    
    class Meta:
        verbose_name = "Hero Slide"
        verbose_name_plural = "Hero Slides"
        ordering = ['order']
    
    def __str__(self):
        return f"{self.title} (Order: {self.order})"
    
    # Helper method ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi legacy code
    def get_cropped_image_url(self):
        """Tr·∫£ v·ªÅ URL ·∫£nh ƒë√£ crop (t∆∞∆°ng th√≠ch v·ªõi HeroSetting)"""
        if self.background and self.cropping:
            try:
                from easy_thumbnails.files import get_thumbnailer
                crop_coords = self.cropping
                if crop_coords and crop_coords.strip():
                    coords = crop_coords.split(',')
                    if len(coords) == 4:
                        x = int(round(float(coords[0])))
                        y = int(round(float(coords[1])))
                        w = int(round(float(coords[2])))
                        h = int(round(float(coords[3])))
                        box = (x, y, x + w, y + h)
                        
                        thumbnailer = get_thumbnailer(self.background)
                        cropped_image = thumbnailer.get_thumbnail({
                            'size': (1534, 512),
                            'crop': 'smart',
                            'quality': 95,
                            'box': box,
                        })
                        return cropped_image.url
                else:
                    return self.background.url
            except Exception as e:
                print(f"Error creating cropped thumbnail: {e}")
                return self.background.url if self.background else None
        return None


# ===== LEGACY MODEL (s·∫Ω x√≥a sau khi migrate) =====
class HeroSetting(models.Model):
    """Legacy Hero Setting - S·∫º B·ªä X√ìA sau khi migrate data"""
    background = ImageCropField(
        "·∫¢nh n·ªÅn Hero",
        upload_to="hero_backgrounds/",
        null=True,
        blank=True,
    )
    cropping = ImageRatioField('background', '1534x512')

    def __str__(self):
        return "Hero background setting (Legacy - s·∫Ω b·ªã x√≥a)"
    
    class Meta:
        verbose_name = "Hero Setting (Legacy)"
        verbose_name_plural = "Hero Settings (Legacy)"

# ==================== PROGRAMS ====================
class Program(TimeStampedModel):
    """Ch∆∞∆°ng tr√¨nh h·ªçc - Qu·∫£n l√Ω t·∫°i: Ch∆∞∆°ng tr√¨nh h·ªçc ‚Üí Programs"""
    name = models.CharField(max_length=200, verbose_name="T√™n ch∆∞∆°ng tr√¨nh")
    description = models.TextField(verbose_name="M√¥ t·∫£")
    age_range = models.CharField(max_length=50, verbose_name="ƒê·ªô tu·ªïi")
    
    # ·∫¢nh ch∆∞∆°ng tr√¨nh
    image = FilerImageField(
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="program_images",
        verbose_name="·∫¢nh ch∆∞∆°ng tr√¨nh",
        help_text="T·ªâ l·ªá khuy·∫øn ngh·ªã: 400x300"
    )
    
    # Icon (emoji ho·∫∑c text)
    icon = models.CharField(
        max_length=10,
        default="üìö",
        verbose_name="Icon",
        help_text="Emoji ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát"
    )
    
    # Th√¥ng tin th√™m
    duration = models.CharField(
        max_length=100,
        blank=True,
        verbose_name="Th·ªùi gian h·ªçc"
    )
    class_size = models.IntegerField(
        default=15,
        verbose_name="Sƒ© s·ªë l·ªõp"
    )
    
    # Th·ª© t·ª± v√† hi·ªÉn th·ªã
    order = models.IntegerField(default=0, verbose_name="Th·ª© t·ª±")
    is_featured = models.BooleanField(default=False, verbose_name="N·ªïi b·∫≠t")
    is_active = models.BooleanField(default=True, verbose_name="Hi·ªÉn th·ªã")
    
    class Meta:
        verbose_name = "Ch∆∞∆°ng tr√¨nh h·ªçc"
        verbose_name_plural = "Ch∆∞∆°ng tr√¨nh h·ªçc"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} ({self.age_range})"

# ==================== STAFF ====================
class Staff(TimeStampedModel):
    """ƒê·ªôi ng≈© gi√°o vi√™n - Qu·∫£n l√Ω t·∫°i: Th√¥ng tin c∆° b·∫£n ‚Üí Staff"""
    name = models.CharField(max_length=200, verbose_name="H·ªç t√™n")
    role = models.CharField(max_length=200, verbose_name="Ch·ª©c v·ª•")
    description = models.TextField(verbose_name="M√¥ t·∫£")
    
    # ·∫¢nh gi√°o vi√™n
    photo = FilerImageField(
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="staff_photos",
        verbose_name="·∫¢nh ƒë·∫°i di·ªán",
        help_text="T·ªâ l·ªá khuy·∫øn ngh·ªã: vu√¥ng 400x400"
    )
    
    # Th√¥ng tin li√™n h·ªá
    email = models.EmailField(blank=True, verbose_name="Email")
    phone = models.CharField(max_length=20, blank=True, verbose_name="ƒêi·ªán tho·∫°i")
    
    # Kinh nghi·ªám
    experience_years = models.IntegerField(
        default=0,
        verbose_name="S·ªë nƒÉm kinh nghi·ªám"
    )
    education = models.TextField(
        blank=True,
        verbose_name="H·ªçc v·∫•n"
    )
    specialization = models.CharField(
        max_length=200,
        blank=True,
        verbose_name="Chuy√™n m√¥n"
    )
    
    # Th·ª© t·ª± v√† hi·ªÉn th·ªã
    order = models.IntegerField(default=0, verbose_name="Th·ª© t·ª±")
    is_featured = models.BooleanField(default=False, verbose_name="N·ªïi b·∫≠t")
    is_active = models.BooleanField(default=True, verbose_name="Hi·ªÉn th·ªã")
    
    class Meta:
        verbose_name = "Gi√°o vi√™n"
        verbose_name_plural = "ƒê·ªôi ng≈© gi√°o vi√™n"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.role}"

# ==================== TESTIMONIALS ====================
class Testimonial(TimeStampedModel):
    """ƒê√°nh gi√° ph·ª• huynh - Qu·∫£n l√Ω t·∫°i: ƒê√°nh gi√° ph·ª• huynh ‚Üí Testimonials"""
    parent_name = models.CharField(max_length=200, verbose_name="T√™n ph·ª• huynh")
    child_name = models.CharField(max_length=200, verbose_name="T√™n con")
    child_class = models.CharField(max_length=100, verbose_name="L·ªõp")
    
    content = models.TextField(verbose_name="N·ªôi dung ƒë√°nh gi√°")
    rating = models.IntegerField(
        choices=[(i, f"{i} sao") for i in range(1, 6)],
        default=5,
        verbose_name="ƒê√°nh gi√°"
    )
    
    # ·∫¢nh ph·ª• huynh
    parent_photo = FilerImageField(
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="testimonial_photos",
        verbose_name="·∫¢nh ph·ª• huynh",
        help_text="T·ªâ l·ªá khuy·∫øn ngh·ªã: vu√¥ng 200x200"
    )
    
    # Th·ª© t·ª± v√† hi·ªÉn th·ªã
    order = models.IntegerField(default=0, verbose_name="Th·ª© t·ª±")
    is_featured = models.BooleanField(default=False, verbose_name="N·ªïi b·∫≠t")
    is_active = models.BooleanField(default=True, verbose_name="Hi·ªÉn th·ªã")
    
    class Meta:
        verbose_name = "ƒê√°nh gi√° ph·ª• huynh"
        verbose_name_plural = "ƒê√°nh gi√° ph·ª• huynh"
        ordering = ['order', '-created_at']
    
    def __str__(self):
        return f"{self.parent_name} - {self.child_name}"

# ==================== NEWS ====================
class News(TimeStampedModel, SEOModel):
    """Tin t·ª©c - Qu·∫£n l√Ω t·∫°i: Tin t·ª©c & B√†i vi·∫øt ‚Üí News"""
    title = models.CharField(max_length=200, verbose_name="Ti√™u ƒë·ªÅ")
    slug = models.SlugField(unique=True, verbose_name="ƒê∆∞·ªùng d·∫´n")
    excerpt = models.TextField(max_length=300, verbose_name="M√¥ t·∫£ ng·∫Øn")
    content = models.TextField(verbose_name="N·ªôi dung")
    
    # ·∫¢nh thumbnail
    thumbnail = FilerImageField(
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="news_thumbnails",
        verbose_name="·∫¢nh thumbnail",
        help_text="T·ªâ l·ªá khuy·∫øn ngh·ªã: 400x300"
    )
    
    # Th√¥ng tin b√†i vi·∫øt
    author = models.CharField(max_length=100, default="Admin", verbose_name="T√°c gi·∫£")
    publish_date = models.DateTimeField(auto_now_add=True, verbose_name="Ng√†y ƒëƒÉng")
    
    # Category
    category = models.CharField(
        max_length=50,
        choices=[
            ('news', 'Tin t·ª©c'),
            ('events', 'S·ª± ki·ªán'),
            ('activities', 'Ho·∫°t ƒë·ªông'),
            ('announcements', 'Th√¥ng b√°o'),
        ],
        default='news',
        verbose_name="Danh m·ª•c"
    )
    
    # Th·ª© t·ª± v√† hi·ªÉn th·ªã
    is_featured = models.BooleanField(default=False, verbose_name="N·ªïi b·∫≠t")
    is_active = models.BooleanField(default=True, verbose_name="Hi·ªÉn th·ªã")
    
    class Meta:
        verbose_name = "Tin t·ª©c"
        verbose_name_plural = "Tin t·ª©c & B√†i vi·∫øt"
        ordering = ['-publish_date']
    
    def __str__(self):
        return self.title
    
    def get_absolute_url(self):
        return reverse('news_detail', kwargs={'slug': self.slug})

# ==================== C√ÅC MODEL C≈® (gi·ªØ nguy√™n) ====================
class SchoolInfo(TimeStampedModel):
    """Th√¥ng tin c∆° b·∫£n v·ªÅ tr∆∞·ªùng"""
    name = models.CharField(max_length=200, verbose_name="T√™n tr∆∞·ªùng")
    slogan = models.CharField(max_length=300, blank=True, verbose_name="Slogan")
    description = models.TextField(verbose_name="M√¥ t·∫£ v·ªÅ tr∆∞·ªùng")
    
    # Th√¥ng tin li√™n h·ªá
    address = models.TextField(verbose_name="ƒê·ªãa ch·ªâ")
    phone = models.CharField(max_length=20, verbose_name="S·ªë ƒëi·ªán tho·∫°i")
    email = models.EmailField(verbose_name="Email")
    website = models.URLField(blank=True, verbose_name="Website")
    
    # Gi·ªù ho·∫°t ƒë·ªông
    working_hours = models.CharField(
        max_length=100, 
        default="7:00 - 18:00",
        verbose_name="Gi·ªù ho·∫°t ƒë·ªông"
    )
    working_days = models.CharField(
        max_length=100,
        default="Th·ª© 2 - Th·ª© 6", 
        verbose_name="Ng√†y ho·∫°t ƒë·ªông"
    )
    
    # H√¨nh ·∫£nh
    logo = FilerImageField(
        null=True, 
        blank=True, 
        on_delete=models.SET_NULL,
        related_name="school_logos",
        verbose_name="Logo tr∆∞·ªùng"
    )
    hero_image = FilerImageField(
        null=True, 
        blank=True, 
        on_delete=models.SET_NULL,
        related_name="school_hero_images",
        verbose_name="H√¨nh ·∫£nh ch√≠nh"
    )
    
    # Social media
    facebook_url = models.URLField(blank=True, verbose_name="Facebook")
    youtube_url = models.URLField(blank=True, verbose_name="YouTube") 
    instagram_url = models.URLField(blank=True, verbose_name="Instagram")
    
    # T√†i li·ªáu
    brochure = FilerFileField(
        null=True,
        blank=True, 
        on_delete=models.SET_NULL,
        related_name="school_brochures",
        verbose_name="Brochure (PDF)"
    )
    
    class Meta:
        verbose_name = "Th√¥ng tin tr∆∞·ªùng"
        verbose_name_plural = "Th√¥ng tin tr∆∞·ªùng"
    
    def __str__(self):
        return self.name

class Gallery(TimeStampedModel):
    """Th∆∞ vi·ªán ·∫£nh - Qu·∫£n l√Ω t·∫°i: Th√¥ng tin c∆° b·∫£n ‚Üí Gallery"""
    title = models.CharField(max_length=200, verbose_name="Ti√™u ƒë·ªÅ")
    description = models.TextField(blank=True, verbose_name="M√¥ t·∫£")
    image = FilerImageField(
        on_delete=models.CASCADE,
        related_name="gallery_images",
        verbose_name="H√¨nh ·∫£nh"
    )
    category = models.CharField(
        max_length=50,
        choices=[
            ('classroom', 'L·ªõp h·ªçc'),
            ('playground', 'S√¢n ch∆°i'),
            ('activities', 'Ho·∫°t ƒë·ªông'),
            ('events', 'S·ª± ki·ªán'),
            ('meals', 'B·ªØa ƒÉn'),
        ],
        default='activities',
        verbose_name="Danh m·ª•c"
    )
    is_featured = models.BooleanField(default=False, verbose_name="N·ªïi b·∫≠t")
    order = models.IntegerField(default=0, verbose_name="Th·ª© t·ª±")
    
    class Meta:
        verbose_name = "H√¨nh ·∫£nh"
        verbose_name_plural = "Th∆∞ vi·ªán ·∫£nh"
        ordering = ['order', '-created_at']
    
    def __str__(self):
        return self.title

class FAQ(TimeStampedModel):
    """C√¢u h·ªèi th∆∞·ªùng g·∫∑p"""
    question = models.CharField(max_length=500, verbose_name="C√¢u h·ªèi")
    answer = models.TextField(verbose_name="C√¢u tr·∫£ l·ªùi")
    category = models.CharField(
        max_length=50,
        choices=[
            ('admission', 'Tuy·ªÉn sinh'),
            ('tuition', 'H·ªçc ph√≠'),
            ('curriculum', 'Ch∆∞∆°ng tr√¨nh h·ªçc'),
            ('facilities', 'C∆° s·ªü v·∫≠t ch·∫•t'),
            ('health', 'S·ª©c kh·ªèe'),
            ('other', 'Kh√°c'),
        ],
        default='other',
        verbose_name="Danh m·ª•c"
    )
    is_active = models.BooleanField(default=True, verbose_name="Hi·ªÉn th·ªã")
    order = models.IntegerField(default=0, verbose_name="Th·ª© t·ª±")
    
    class Meta:
        verbose_name = "C√¢u h·ªèi th∆∞·ªùng g·∫∑p"
        verbose_name_plural = "C√¢u h·ªèi th∆∞·ªùng g·∫∑p"
        ordering = ['order', 'question']
    
    def __str__(self):
        return self.question

class Achievement(TimeStampedModel):
    """Th√†nh t√≠ch, gi·∫£i th∆∞·ªüng"""
    title = models.CharField(max_length=200, verbose_name="T√™n gi·∫£i th∆∞·ªüng")
    description = models.TextField(blank=True, verbose_name="M√¥ t·∫£")
    year = models.IntegerField(verbose_name="NƒÉm")
    image = FilerImageField(
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name="achievement_images",
        verbose_name="H√¨nh ·∫£nh"
    )
    is_featured = models.BooleanField(default=False, verbose_name="N·ªïi b·∫≠t")
    
    class Meta:
        verbose_name = "Th√†nh t√≠ch"
        verbose_name_plural = "Th√†nh t√≠ch & Gi·∫£i th∆∞·ªüng"
        ordering = ['-year', 'title']
    
    def __str__(self):
        return f"{self.title} ({self.year})"

# Legacy model - gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch
class HeroSetting(models.Model):
    """Legacy Hero Setting - s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·ªüi HeroSlide"""
    background = ImageCropField(
        "·∫¢nh n·ªÅn Hero",
        upload_to="hero_backgrounds/",
        null=True,
        blank=True,
    )
    cropping = ImageRatioField('background', '1534x512')

    def __str__(self):
        return "Hero background setting (Legacy)"
    
    class Meta:
        verbose_name = "Hero Setting (C≈©)"
        verbose_name_plural = "Hero Settings (C≈©)"